n=2^120
pryr::bits(float32bin(n*(n+1)/2))
n=2^15
pryr::bits(float32bin(n*(n+1)/2))
n=2^127
pryr::bits(float32bin(n*(n+1)/2))
n=2^64
n=2^64
pryr::bits(float32bin(n*(n+1)/2))
n=2^63
pryr::bits(float32bin(n*(n+1)/2))
n=2^63
n=2^63
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^127))
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^127))
pryr::bits(float32bin(2^128))
pryr::bits(float32bin(2^129))
pryr::bits(float32bin(2^128))
n=2^64
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^128))
n=2^65
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^128))
n=2^64+8
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^128))
n=2^65
n=2^65
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^128))
pryr::bits(float32bin(2^128)) == pryr::bits(floats32bin(Inf))
pryr::bits(float32bin(2^128)) == pryr::bits(float32bin(Inf))
n=2^65
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(2^128)) == pryr::bits(float32bin(Inf))
pryr::bits(float32bin(Inf)
pryr::bits(float32bin(Inf))
pryr::bits(float32bin(Inf))
pryr::bits(float32bin(n*(n+1)/2))
pryr::bits(float32bin(n*(n+1)/2)) ==pryr::bits(float32bin(Inf))
ln(2)
log(2)
log(2^128)
log(2^128+1)
.1 == .3/3
x <- seq(0, 1, by=.1)
x[4] == .3
all.equal(x[4], .3)
print(x[4], digits=20)
print(.3,   digits=20)
## Example: 체체???리의 ?????? 종들 ??? ?????? ?????? 종을 9마리, 강에 ?????? 종을 6마리 ???????????? 각각??? ????????? 길이??? ?????????.
flies <- read.csv("tsetse_flies.csv")
setwd("C:/Workspace/20241/nonpara")
## Example: 체체???리의 ?????? 종들 ??? ?????? ?????? 종을 9마리, 강에 ?????? 종을 6마리 ???????????? 각각??? ????????? 길이??? ?????????.
flies <- read.csv("tsetse_flies.csv")
head(flies)
m <- length(flies$length[flies$label=="forest"]); m
n <- length(flies$length[flies$label=="river"]); n
N <- m + n
View(flies)
value <- (8.0, 8.7, 8.8, 9.3, 9.7, 9.9, 10.0, 10.1, 10.6, 11.3, 6.1, 7.8, 8.1, 8.9, 9.0, 10.4, 10.5, 10.7, 10.8, 13.7)
value <- c(8.0, 8.7, 8.8, 9.3, 9.7, 9.9, 10.0, 10.1, 10.6, 11.3, 6.1, 7.8, 8.1, 8.9, 9.0, 10.4, 10.5, 10.7, 10.8, 13.7)
treatment <- c("treatment1"*10, "treatment2"*10)
treatment <- c(rep("treatment1", 10), "treatment2"*10)
treatment <- c(rep(x = "treatment1", 10), "treatment2"*10)
treatment <- rep(c("treatment1", "treatment2"), each = 10)
treatment
df <- data.frame(value, treatment)
View(df)
x <- with(flies, length[label=="treatment1"])
y <- with(flies, length[label=="treatment2"])
DescTools::SiegelTukeyTest(x,y)
x <- with(flies, length[label=="treatment1"])
y <- with(flies, length[label=="treatment2"])
DescTools::SiegelTukeyTest(x,y)
x <- with(df, length[label=="treatment1"])
y <- with(df, length[label=="treatment2"])
DescTools::SiegelTukeyTest(x,y)
x
x <- with(df, length[label=="treatment1"])
x <- with(df, length[treatment=="treatment1"])
y <- with(df, length[treatment=="treatment2"])
View(df)
x <- with(df, length[treatment=="treatment1"])
value <- c(8.0, 8.7, 8.8, 9.3, 9.7, 9.9, 10.0, 10.1, 10.6, 11.3, 6.1, 7.8, 8.1, 8.9, 9.0, 10.4, 10.5, 10.7, 10.8, 13.7)
value <- c(8.0, 8.7, 8.8, 9.3, 9.7, 9.9, 10.0, 10.1, 10.6, 11.3, 6.1, 7.8, 8.1, 8.9, 9.0, 10.4, 10.5, 10.7, 10.8, 13.7)
treatment <- rep(c("treatment1", "treatment2"), each = 10)
df <- data.frame(value, treatment)
x <- with(df, length[treatment=="treatment1"])
label <- rep(c("treatment1", "treatment2"), each = 10)
df <- data.frame(value, label)
x <- with(df, length[treatment=="treatment1"])
y <- with(df, length[treatment=="treatment2"])
y <- with(df, length[label=="treatment2"])
x <- with(df, length[label=="treatment1"])
## Example: 체체???리의 ?????? 종들 ??? ?????? ?????? 종을 9마리, 강에 ?????? 종을 6마리 ???????????? 각각??? ????????? 길이??? ?????????.
flies <- read.csv("tsetse_flies.csv")
head(flies)
m <- length(flies$length[flies$label=="forest"]); m
n <- length(flies$length[flies$label=="river"]); n
N <- m + n
ggplot(flies, aes(x=label, y=length)) +
geom_boxplot() +
geom_dotplot(binaxis="y", stackdir="center", dotsize=.5)
ggplot(flies, aes(x=label, y=length)) +
geom_boxplot() +
geom_dotplot(binaxis="y", stackdir="center", dotsize=.5)
library(tidyr)
library(ggplot2)
library(fGarch)
library(gtools)
library(dplyr)
library(DescTools)
x <- with(df, length[label=="treatment1"])
y <- with(df, length[label=="treatment2"])
ggplot(flies, aes(x=label, y=length)) +
geom_boxplot() +
geom_dotplot(binaxis="y", stackdir="center", dotsize=.5)
D.observed <- with(flies, mean(length[label=="forest"])-mean(length[label=="river"]))
D.observed
D <- numeric()
for (i in 1:nrow(all.perms)) {
length.forest.permuted <- flies$length[all.perms[i,]]
length.river.permuted <- flies$length[-all.perms[i,]]
D[i] <- mean(length.forest.permuted) - mean(length.river.permuted)
}
all.perms <- gtools::combinations(N, m) # Consider all permutations
head(all.perms)
D <- numeric()
for (i in 1:nrow(all.perms)) {
length.forest.permuted <- flies$length[all.perms[i,]]
length.river.permuted <- flies$length[-all.perms[i,]]
D[i] <- mean(length.forest.permuted) - mean(length.river.permuted)
}
ggplot(data.frame(D), aes(D)) +
geom_histogram(binwidth = 0.005, color="white") +
geom_vline(xintercept=D.observed, color='red')
p.value <- sum(D >= D.observed)/nrow(all.perms) # exact P-value
p.value
nrow(all.perms)
B <- 1000 # Consider only 1000 permuations
set.seed(0318)
D <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
length.forest.permuted <- flies$length[rand.id]
length.river.permuted <- flies$length[-rand.id]
D[i] <- mean(length.forest.permuted) - mean(length.river.permuted)
}
p.value <- 2*(sum(D >= D.observed))/B # approx. P-value
p.value
flies.rank <- flies %>% mutate(rank=rank(length))
flies.rank <- flies %>% mutate(rank=rank(length))
flies.rank
W1.observed <- with(flies.rank, sum(rank[label=="forest"])) # Wilcoxon rank sum
W1.observed
U.observed <- W1.observed - m*(m+1)/2 # Mann-Whitney U
U.observed
# Caution: dwilcox, pwilcox??? Mann-Whitney U ???계량 기??? (???콕슨 ???????????? ??????)
data.frame(x=0:m*n, density=dwilcox(0:m*n, m, n)) %>%
ggplot(aes(x=x, y=density)) + geom_line() +
geom_vline(xintercept=U.observed, color="red")
pwilcox(U.observed, m=m, n=n, lower.tail=FALSE) #pvalue
x <- with(flies, length[label=="forest"])
x
# Caution: wilcox.test??? W ???계량 = U ???계량???
wilcox.test(x, y, alternative="greater") #alternative -> x?? ???? ?? Ŭ ???̴?
y <- with(flies, length[label=="river"])
# Caution: wilcox.test??? W ???계량 = U ???계량???
wilcox.test(x, y, alternative="greater") #alternative -> x?? ???? ?? Ŭ ???̴?
x <- with(df, value[label=="treatment1"])
y <- with(df, value[label=="treatment2"])
DescTools::SiegelTukeyTest(x,y)
m <- length(df$value[df$label=="treatment1"]); m
n <- length(df$value[df$label=="treatment2"]); n
N <- m + n
B <- 1000 # Consider only 1000 permuations
set.seed(0318)
D <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
length.forest.permuted <- flies$length[rand.id]
length.river.permuted <- flies$length[-rand.id]
D[i] <- mean(length.forest.permuted) - mean(length.river.permuted)
}
D[i] <- mean(t1.permuted) - mean(t2.permuted)
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.permuted <- df$value[rand.id]
t2.permuted <- df$value[-rand.id]
D[i] <- mean(t1.permuted) - mean(t2.permuted)
}
d
D
t1.permuted
DescTools::SiegelTukeyTest(x,y)
DescTools::SiegelTukeyTest(x,y)
D[i] <- sum(t1.permuted)
D
rank(df$value)
sort(df$value)
View(flies.rank)
View(df)
View(flies.rank)
View(df)
df[order(df$value)]
df[order(df$value), ]
df <- df[order(df$value), ]
df
rank <- (1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 19, 18, 15, 14, 11, 10, 7, 6, 3, 2)
rank <- c(1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 19, 18, 15, 14, 11, 10, 7, 6, 3, 2)
df[, "rank"] <- rank
View(df)
rank.st <- c(1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 19, 18, 15, 14, 11, 10, 7, 6, 3, 2)
df[, "rank_st"] <- rank.st
View(df)
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank[rand.id]
t2.st.permuted <- df$rank[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
D
D.observed <- with(df, mean(rank.st[label=="treatment1"])-mean(rank.st[label=="treatment2"]))
pvalue.st <- 2*(sum(D >= D.observed))/B # approx. P-value
pvalue.st
DescTools::SiegelTukeyTest(x,y)
rank.ab <- c(seq(1:10))
rank.ab <- c(seq(1:10), seq(1:10, -1))
rank.ab <- c(seq(1:10), seq(10:1))
rank.ab <- c(seq(1:10), seq(10:1))
rank.ab
rank.ab <- c(seq(1:10), seq(from = 10, to = 1))
rank.ab
df[, "rank_ab"] <- rank.ab
pvalue.ab <- 2*(sum(D >= D2.observed))/B
D2.observed <- with(df, mean(rank.ab[label=="treatment1"])-mean(rank.ab[label=="treatment2"]))
pvalue.ab <- 2*(sum(D >= D2.observed))/B
pvalue.st
pvalue.ab
ansari.test(x,y)
x <- with(df, value[label=="treatment1"])
y <- with(df, value[label=="treatment2"])
ansari.test(x,y)
pvalue.ab
pvalue.st
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank.ab[rand.id]
t2.st.permuted <- df$rank.ab[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
B <- 10000 # Consider only 1000 permuations
set.seed(0318)
D <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank.ab[rand.id]
t2.st.permuted <- df$rank.ab[-rand.id]
D[i] <-
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank.ab[rand.id]
t2.st.permuted <- df$rank.ab[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.st
pvalue.st
pvalue.st <- 2*(sum(D >= D.observed))/B
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank.ab[rand.id]
t2.st.permuted <- df$rank.ab[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank.ab[rand.id]
t2.st.permuted <- df$rank.ab[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
warning()
D
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank_st[rand.id]
t2.st.permuted <- df$rank_st[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
D
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.st
set.seed(0318)
D <- numeric()
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.st
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.st
B <- 10000 # Consider only 1000 permuations
set.seed(0318)
D <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank_st[rand.id]
t2.st.permuted <- df$rank_st[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.st
D2 <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.ab.permuted <- df$rank_ab[rand.id]
t2.ab.permuted <- df$rank_ab[-rand.id]
D2[i] <- mean(t1.ab.permuted) - mean(t2.ab.permuted)
}
pvalue.ab <- 2*(sum(D2 >= D2.observed))/B
pvalue.ab
ansari.test(x,y)
mean(x)
mean(x); mean(y)
df$dev <- ifelse(df$label == "treatment1", df$value - mean_x, data$value - mean_y)
df$dev <- ifelse(df$label == "treatment1", df$value - mean(x), data$value - mean(y))
df$dev <- ifelse(df$label == "treatment1", df$value - mean(x), df$value - mean(y))
View(df)
D3.observed <- with(df, mean(dev[label="treatment1"]/mean(dev[label]="treatment2")))
D3.observed <- with(df, mean(dev[label=="treatment1"]/mean(dev[label]=="treatment2")))
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.rmd.permuted <- df$dev[rand.id]
t2.rmd.permuted <- df$dev[-rand.id]
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
}
D3 <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.rmd.permuted <- df$dev[rand.id]
t2.rmd.permuted <- df$dev[-rand.id]
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
}
pvalue.rmd <- 2*(sum(D3 >= D2.observed))/B
pvalue.rmd
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.rmd.permuted <- df$dev[rand.id]
t2.rmd.permuted <- df$dev[-rand.id]
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
}
D3
df$dev <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y))
df$dev <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y)))
df$dev <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y)))
View(df)
D3.observed <- with(df, mean(dev[label=="treatment1"]/mean(dev[label]=="treatment2")))
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
D3
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.rmd.permuted <- df$dev[rand.id]
t2.rmd.permuted <- df$dev[-rand.id]
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
}
D3
pvalue.rmd
pvalue.rmd <- 2*(sum(D3 >= D3.observed))/B
pvalue.rmd
pvalue.rmd <- 2*(sum(D3 >= D3.observed))/B
pvalue.rmd
D3.observed <- with(df, mean(dev[label=="treatment1"]/mean(dev[label]=="treatment2")))
pvalue.rmd
D3
D3. observed
D3.observed
D3.observed <- with(df, mean(dev[label=="treatment1"])/mean(dev[label]=="treatment2"))
D3.observed
D3.observed
mean(dev[label]=="treatment2")
View(df)
D3.observed <- with(df, mean(dev[label=="treatment1"]) / mean(dev[label]=="treatment2"))
D3.observed
df$dev
rank.ab[label=="treatment2"]
df[, "dev"] <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y)))
D3.observed <- with(df, mean(dev[label=="treatment1"]) / mean(dev[label]=="treatment2"))
D3.observed
dev <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y)))
df[, "dev"] <- dev
D3.observed <- with(df, mean(dev[label=="treatment1"]) / mean(dev[label]=="treatment2"))
D3.observed
D3.observed <- with(df, mean(dev[label=="treatment1"]) / mean(dev[label]=="treatment2"))
df$dev
df$dev[label=="treatment2"]
mean(dev[label=="treatment1"]) / mean(dev[label]=="treatment2")
mean(dev$[label=="treatment1"]) / mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"]) / mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"])
mean(df$dev[label=="treatment1"])
mean(df$dev[label=="treatment1"]) %  mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"]) %%  mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"]) /
mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"]) /
mean(df$dev[label]=="treatment2")
mean(df$dev[label=="treatment1"])
mean(df$dev[label=="treatment1"]) / mean(df$dev[label=="treatment2"])
D3.observed <- with(df, mean(df$dev[label=="treatment1"]) / mean(df$dev[label=="treatment2"]))
pvalue.rmd <- 2*(sum(D3 >= D3.observed))/B
pvalue.rmd
pvalue.rmd <- 2*min( c(sum(D3 >= D3.observed)/B, sum(D3 <= D3.observed)/B) )
pvalue.rmd
pvalue.st
pvalue.ab
pvalue.rmd
rmd.test(x,y)
muOutlier::rmd.test(x,y)
juOutlier::rmd.test(x,y)
jmuOutlier::rmd.test(x,y)
install(jmuOutlier)
install.packages(jmuOutlier)
install.packages("jmuOutlier"")
install.packages("jmuOutlier")
install.packages("jmuOutlier")
library(jmuOutlier)
jmuOutlier::rmd.test(x,y)
# pvalue
pvalue.st ; pvalue.ab ; pvalue.rmd
# pvalue
pvalue.st ; pvalue.ab ; pvalue.rmd
# pvalue
c("pvalue of st", pvalue.st) ; pvalue.ab ; pvalue.rmd
# pvalue
pvalue.st ; pvalue.ab ; pvalue.rmd
df[, "dev"] <- dev
df[, "rank_st"] <- rank.st
value <- c(8.0, 8.7, 8.8, 9.3, 9.7, 9.9, 10.0, 10.1, 10.6, 11.3, 6.1, 7.8, 8.1, 8.9, 9.0, 10.4, 10.5, 10.7, 10.8, 13.7)
label <- rep(c("treatment1", "treatment2"), each = 10)
df <- data.frame(value, label)
x <- with(df, value[label=="treatment1"])
y <- with(df, value[label=="treatment2"])
mean(x); mean(y)
m <- length(df$value[df$label=="treatment1"]); m
n <- length(df$value[df$label=="treatment2"]); n
N <- m + n
df <- df[order(df$value), ]
rank.st <- c(1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 19, 18, 15, 14, 11, 10, 7, 6, 3, 2)
rank.ab <- c(seq(1:10), seq(from = 10, to = 1))
dev <- ifelse(df$label == "treatment1", abs(df$value - mean(x)), abs(df$value - mean(y)))
df[, "rank_st"] <- rank.st
df[, "rank_ab"] <- rank.ab
df[, "dev"] <- dev
D.observed <- with(df, mean(rank.st[label=="treatment1"])-mean(rank.st[label=="treatment2"]))
D2.observed <- with(df, mean(rank.ab[label=="treatment1"])-mean(rank.ab[label=="treatment2"]))
D3.observed <- with(df, mean(df$dev[label=="treatment1"]) / mean(df$dev[label=="treatment2"]))
# pvalue
pvalue.st <- 2*(sum(D >= D.observed))/B
D.observed <- with(df, mean(rank.st[label=="treatment1"])-mean(rank.st[label=="treatment2"]))
D2.observed <- with(df, mean(rank.ab[label=="treatment1"])-mean(rank.ab[label=="treatment2"]))
D3.observed <- with(df, mean(df$dev[label=="treatment1"]) / mean(df$dev[label=="treatment2"]))
B <- 10000
set.seed(0318)
# permutation for st test
D <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.st.permuted <- df$rank_st[rand.id]
t2.st.permuted <- df$rank_st[-rand.id]
D[i] <- mean(t1.st.permuted) - mean(t2.st.permuted)
}
# permutation for ab test
D2 <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.ab.permuted <- df$rank_ab[rand.id]
t2.ab.permuted <- df$rank_ab[-rand.id]
D2[i] <- mean(t1.ab.permuted) - mean(t2.ab.permuted)
}
# permutation for rmd test
D3 <- numeric()
for (i in 1:B) {
rand.id <- sample(1:N, m, replace=FALSE)
t1.rmd.permuted <- df$dev[rand.id]
t2.rmd.permuted <- df$dev[-rand.id]
D3[i] <- mean(t1.rmd.permuted)/mean(t2.rmd.permuted)
}
# pvalue
pvalue.st <- 2*(sum(D >= D.observed))/B
pvalue.ab <- 2*(sum(D2 >= D2.observed))/B
pvalue.rmd <- 2*min( c(sum(D3 >= D3.observed)/B, sum(D3 <= D3.observed)/B) )
pvalue.st ; pvalue.ab ; pvalue.rmd
value <- c(1.69 -0.90 2.75 0.51 1.12)
df <- data.frame(value, label)
value <- c(1.69, -0.90, 2.75, 0.51, 1.12, 2.33, 2.15, -0.39, 1.29, 2.25, 2.46, 2.43, 2.22, 2.96, 1.48)
label <- rep(c("t1", "t2", "t3"), each = 5)
df <- data.frame(value, label)
kruskal.test(value ~ label, data=df)
qchisq(p = .05, df = 22, lower.tail = FALSE)
qchisq(p = .05, df = 2, lower.tail = FALSE)
pchisq(p = .05, df = 2, lower.tail = FALSE)
chisq(p = 0.05, df = 2, lower.tail = FALSE)
qchisq(p = 0.05, df = 2, lower.tail = FALSE)
qchisq(p = 0.95, df = 2, lower.tail = FALSE)
qchisq(p = 0.05, df = 2, lower.tail = FALSE)
# exact test
DescTools::JonckheereTerpstraTest(value ~ label, data=df, alternative="increasing")
df$label <- factor(df$label, ordered=TRUE)
# exact test
DescTools::JonckheereTerpstraTest(value ~ label, data=df, alternative="increasing")
qchisq(p = 0.05, df = 2, lower.tail = FALSE)
